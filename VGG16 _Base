from keras import layers
from keras import models
from keras import optimizers
from keras import applications

import tensorflow as tf
from keras.applications import VGG16
from keras.models import Sequential
from keras import layers
from keras.layers import Dense, Flatten, GlobalAveragePooling2D

***

import os
import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from keras.applications.vgg16 import preprocess_input

base_dir = 'E:/Bilder/Uni/BaRaume'
base_dir_models = 'E:/Bilder/Uni/TensModels'

train_dir = os.path.join(base_dir, 'trainMod')
validation_dir = os.path.join(base_dir, 'valMod')
test_dir = os.path.join(base_dir, 'test')

num_classes = 14

vgg16_weights_path = 'imagenet'

model = Sequential()
model.add(VGG16(include_top=False, pooling='avg', weights=vgg16_weights_path,))
model.add(Dense(1024, activation='relu'))
model.add(layers.Dropout(0.5))
model.add(Dense(1024, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))

# Say not to train first layer (VGG16) model. It is already trained
model.layers[0].trainable = False

***

rmsprop = optimizers.RMSprop(lr=0.0001, rho=0.9)
adam = optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, amsgrad=True)
sgd =optimizers.SGD(lr=0.01, nesterov=False)
model.compile(optimizer=adam, loss='categorical_crossentropy', metrics=['accuracy'])

***
train_datagen = ImageDataGenerator(
    preprocessing_function=applications.vgg16.preprocess_input,
    rescale=1./256,
    rotation_range=30,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
    
    ***
    
    history = model.fit_generator(
      train_generator,
      steps_per_epoch=10,
      epochs=75,
      validation_data=validation_generator,
      validation_steps=5,
      )
                                  )
                            

val_datagen = ImageDataGenerator(preprocessing_function=applications.vgg16.preprocess_input)

train_generator = train_datagen.flow_from_directory(
        # This is the target directory
        train_dir,
        batch_size=20,
         class_mode='categorical')

validation_generator = val_datagen.flow_from_directory(
        validation_dir,
        batch_size=20,
        class_mode='categorical')
        
        ***
        
        
        %matplotlib inline
import matplotlib.pyplot as plt
acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc', c='red')
plt.title('VGG16 Training and validation accuracy')
plt.legend()

plt.figure()

plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss', c='red')
plt.title('VGG16 Training and validation loss')
plt.legend()

plt.show()
